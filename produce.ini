[]
train = java -classpath bin epar.Train
decode = java -classpath bin epar.Decode
shell = bash
prelude =
	def count_lines(filename):
		result = 0
		with open(filename) as f:
			for line in f:
				result += 1
		return result

## EVALUATION (NEW AND DIVINE) ################################################

[output/%{exp}/eval.%{i}.txt]
dep.filtered_ccgbank_deps = output/%{exp}/output.%{i}.filtered.ccgbank_deps
dep.reference_filtered_stagged = output/%{exp}/reference.%{i}.filtered.stagged
dep.reference_filtered_ccgbank_deps = output/%{exp}/reference.%{i}.filtered.ccgbank_deps
recipe = ./ext/candc/src/scripts/ccg/evaluate %{reference_filtered_stagged} %{reference_filtered_ccgbank_deps} %{filtered_ccgbank_deps} > %{target}

[output/%{exp}/reference.%{i}.filtered.%{x}]
cond = %{x in ('stagged', 'ccgbank_deps')}
deps = output/%{exp}/output.%{i}.filtered.ccgbank_deps

[output/%{exp}/output.%{i}.filtered.ccgbank_deps]
dep.ccgbank_deps = output/%{exp}/output.%{i}.ccgbank_deps
dep.reference_stagged = data/%{exp}/reference.stagged
dep.reference_ccgbank_deps = data/%{exp}/reference.ccgbank_deps
reference_filtered_stagged = output/%{exp}/reference.%{i}.filtered.stagged
reference_filtered_ccgbank_deps = output/%{exp}/reference.%{i}.filtered.ccgbank_deps
outputs = %{reference_filtered_stagged} %{reference_filtered_ccgbank_deps}
recipe = ./scripts/filter_ccgbank_deps %{reference_stagged} %{reference_ccgbank_deps} %{ccgbank_deps} %{reference_filtered_stagged} %{reference_filtered_ccgbank_deps} %{target}

[output/%{exp}/output.%{i}.ccgbank_deps]
depfile = output/%{exp}/output.%{i}.ccgbank_deps.d
dep.output = output/%{exp}/output.%{i}.txt
recipe =
	rm -f %{target}
	echo '#' >> %{target}
	echo '#' >> %{target}
	echo '' >> %{target}
	for j in $(zsh -c 'echo {1..$(cat %{output} | wc -l)}')
	do
		cat tmp/%{exp}/output.%{i}.ccgbank_deps.part.$j >> %{target}
	done

[output/%{exp}/output.%{i}.ccgbank_deps.d]
dep.output = output/%{exp}/output.%{i}.txt
recipe =
	rm -f %{target}
	for j in $(zsh -c 'echo {1..$(cat %{output} | wc -l)}')
	do
		echo tmp/%{exp}/output.%{i}.ccgbank_deps.part.$j >> %{target}
	done

[tmp/%{exp}/output.%{i}.ccgbank_deps.part.%{j}]
dep.ccgbank_deps_without_cats = tmp/%{exp}/output.%{i}.ccgbank_deps.without_cats.part.%{j}
dep.text = tmp/%{exp}/output.%{i}.text.part.%{j}
dep.ccgbank_deps_formatted = tmp/%{exp}/output.%{i}.ccgbank_deps.formatted.part.%{j}
dep.cat = tmp/%{exp}/output.%{i}.cat.part.%{j}
recipe =
	if [ `cat %{text} | grep '__PARSE_FAILED__' | wc -l | cut -d\  -f 1` == 0 ]
	then
		grep ^[^\#] %{ccgbank_deps_formatted} | cat > %{target}
		./scripts/merge_fragmented_cats %{cat} >> %{target}
	else
		echo bin/generator failed
		echo '' > %{target}
	fi

[tmp/%{exp}/output.%{i}.text.part.%{j}]
dep.pipe_fragmented = tmp/%{exp}/output.%{i}.pipe.fragmented.part.%{j}
dep.generate = ext/candc/bin/generate
recipe =
	./ext/candc/bin/generate -T ext/candc/src/data/ccg/cats ext/candc/src/data/ccg/cats/markedup %{pipe_fragmented} > %{target}

[tmp/%{exp}/output.%{i}.ccgbank_deps.formatted.part.%{j}]
dep.ccgbank_deps_without_cats = tmp/%{exp}/output.%{i}.ccgbank_deps.without_cats.part.%{j}
dep.pipe_fragmented = tmp/%{exp}/output.%{i}.pipe.fragmented.part.%{j}
dep.cat = tmp/%{exp}/output.%{i}.cat.part.%{j}
recipe = ./scripts/merge_fragmented_deps %{ccgbank_deps_without_cats} %{pipe_fragmented} %{cat} > %{target}

[tmp/%{exp}/output.%{i}.ccgbank_deps.without_cats.part.%{j}]
dep.pipe_fragmented = tmp/%{exp}/output.%{i}.pipe.fragmented.part.%{j}
dep.generate = ext/candc/bin/generate
recipe = ./ext/candc/bin/generate -j ext/candc/src/data/ccg/cats ext/candc/src/data/ccg/cats/markedup %{pipe_fragmented} > %{target} 2> %{target}.log

[tmp/%{exp}/output.%{i}.cat.part.%{j}]
deps = tmp/%{exp}/output.%{i}.pipe.fragmented.part.%{j}

[tmp/%{exp}/output.%{i}.pipe.fragmented.part.%{j}]
dep.pipe = tmp/%{exp}/output.%{i}.pipe.part.%{j}
cat = tmp/%{exp}/output.%{i}.cat.part.%{j}
outputs = %{cat}
recipe = python ext/zpar/scripts/ccg/pipe.py split %{pipe} %{cat} %{target}

[tmp/%{exp}/output.%{i}.pipe.part.%{j}]
dep.output = tmp/%{exp}/output.%{i}.txt.part.%{j}
recipe = python scripts/zpar2pipe.py -op %{output} > %{target}
	
[tmp/%{exp}/output.%{i}.txt.part.%{j}]
dep.output = output/%{exp}/output.%{i}.txt
recipe =
	set -e
	(cd tmp; mkdir -p %{exp})
	cat %{output} | head -%{j} | tail -1 > %{target}

## EVALUATION (OLD AND MESSY) #################################################

[output/%{exp}/eval.%{i}.txt]
dep.output = output/%{exp}/output.%{i}.txt
dep.reference_stagged = data/%{exp}/reference.stagged
dep.reference_ccgbank_deps = data/%{exp}/reference.ccgbank_deps
recipe =
	rm -rf scratch
	./scripts/evaluate.zpar.sh output/%{exp}/output.%{i} data/%{exp}/reference output/%{exp}/eval.%{i}

## DECODING ###################################################################

[output/%{exp}/output.%{i}.txt]
model = output/%{exp}/model.%{i}
recipe =
	mkdir -p output/%{exp}
	%{decode} data/%{exp}/train.input data/%{exp}/train.txt data/%{exp}/rules.binary data/%{exp}/rules.unary %{model} data/%{exp}/input.txt 1 %{target} 2> %{target}.log

## TRAINING ###################################################################

[output/%{exp}/model.0]
recipe =
	mkdir -p output/%{exp}
	touch %{target}

[output/%{exp}/model.%{i}]
recipe =
	mkdir -p output/%{exp}
	%{train} data/%{exp}/train.input data/%{exp}/train.txt data/%{exp}/rules.binary data/%{exp}/rules.unary %{i} output/%{exp}/model 2> %{target}.log

## DATA #######################################################################

[data/wsj/reference.txt]
recipe =
	set -o pipefail
	mkdir -p data/wsj
	python ./ext/zpar/scripts/ccg/ccg2zpar.py <(cat ext/CCGbank1.2/data/AUTO/00/*.auto | ./ext/candc/src/scripts/ccg/convert_auto | sed -f ./ext/candc/src/scripts/ccg/convert_brackets) > %{target}

[data/wsj/reference.stagged]
dep.pipe = data/wsj/reference.pipe
recipe = ./ext/candc/src/scripts/ccg/extract_sequences -s %{pipe} > %{target}

[data/wsj/reference.pipe]
recipe = ./ext/candc/src/scripts/ccg/convert_auto ext/CCGbank1.2/data/AUTO/00/*.auto | sed 's|((S\[b\]\\NP)/NP)/ |(S[b]\\NP)/NP |g' | sed -f ext/candc/src/scripts/ccg/convert_brackets > %{target}

[data/wsj/reference.ccgbank_deps]
dep.parg = data/wsj/reference.parg
recipe = ./ext/candc/src/scripts/ccg/parg2ccgbank_deps %{parg} > %{target}

[data/wsj/reference.parg]
recipe = cat ext/CCGbank1.2/data/PARG/00/*.parg | sed -f ext/candc/src/scripts/ccg/convert_brackets > %{target}

[data/wsj/train.txt]
recipe =
	set -o pipefail
	mkdir -p data/wsj
	python ./ext/zpar/scripts/ccg/ccg2zpar.py <(cat ext/CCGbank1.2/data/AUTO/{02..21}/*.auto | ./ext/candc/src/scripts/ccg/convert_auto | sed -f ./ext/candc/src/scripts/ccg/convert_brackets) > %{target}

[data/wsj-straight-markedup/train.txt]
recipe =
	set -o pipefail
	mkdir -p data/wsj-straight-markedup
	python ./ext/zpar/scripts/ccg/ccg2zpar.py <(cat ext/CCGbank1.2/data/AUTO/{02..21}/*.auto | ./ext/candc/src/scripts/ccg/convert_auto | sed -f ./ext/candc/src/scripts/ccg/convert_brackets | ./scripts/pipe_markup.py | ./scripts/pipe_straighten.py) > %{target}

[data/wsj-straight/train.txt]
recipe =
	set -o pipefail
	mkdir -p data/wsj
	python ./ext/zpar/scripts/ccg/ccg2zpar.py <(cat ext/CCGbank1.2/data/AUTO/{02..21}/*.auto | ./ext/candc/src/scripts/ccg/convert_auto | sed -f ./ext/candc/src/scripts/ccg/convert_brackets | ./scripts/pipe_straighten.py) > %{target}

# HACK
[data/wsj/train.input]
#dep.jacknifed = ../java-candc/data/auto-stagged/jacknifed/wsj02-21.stagged.0.01.100.all
dep.jacknifed = data/wsj/wsj02-21.automultistagged
dep.gold = data/wsj/wsj02-21.stagged
recipe =
	set -o pipefail
	python ./ext/zpar/scripts/ccg/msupercombine.py <(cat %{jacknifed} | ./scripts/msuper2zpar) <(cat %{gold} | tail -n +3) -t > %{target}
	#python ./ext/zpar/scripts/ccg/msupercombine.py <(cat %{jacknifed} | tail -n +3 | ./scripts/msuper2zpar) <(cat %{gold} | tail -n +3) -t > %{target}

[data/wsj-straight-markedup/train.input]
dep.input = data/wsj/train.input
dep.input_markup = scripts/input_markup.py
dep.input_straighten = scripts/input_straighten.py
recipe =
	set -o pipefail
	cat %{input} | ./%{input_markup} | ./%{input_straighten} > %{target}

# HACK
[data/wsj/input.txt]
recipe =
	set -o pipefail
	cat data/wsj/wsj00.automultistagged | ./scripts/msuper2zpar > %{target}

[data/wsj-straight/input.txt]
recipe = cat ~/dev/supertagging/out/straightbank00.automultistagged | ./scripts/msuper2zpar > %{target}
